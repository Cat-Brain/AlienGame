#version 330 core
out vec4 FragColor;

in vec3 normal;
in vec3 fragPos;

uniform vec3 playerPos;
uniform vec3 pos;
uniform float scale;
uniform sampler3D voxels;

vec4 Opacity(vec4 a, vec4 b)
{
    return vec4(a.a * a.rgb + (1 - a.a) * b.rgb, a.a + (1 - a.a) * b.a);
}

void main()
{
    vec3 moveDir = normalize(fragPos - playerPos);
    vec4 color = vec4(0, 0, 0, 0);
    for(int i = 0; i < 1; i++)
    {
        float dx = abs(fragPos.x - playerPos.x);
        float dy = abs(fragPos.y - playerPos.y);

        int x = int(floor(playerPos.x));
        int y = int(floor(playerPos.y));
        int xOffset = int(floor(fragPos.x)), yOffset = int(floor(fragPos.y));

        int n = 1;
        int x_inc, y_inc;
        float error;

        if (dx == 0)
        {
            x_inc = 0;
            error = 9999999;
        }
        else if (fragPos.x > playerPos.x)
        {
            x_inc = 1;
            n += int(floor(fragPos.x)) - x;
            error = (floor(playerPos.x) + 1 - playerPos.x) * dy;
        }
        else
        {
            x_inc = -1;
            n += x - int(floor(fragPos.x));
            error = (playerPos.x - floor(playerPos.x)) * dy;
        }

        if (dy == 0)
        {
            y_inc = 0;
            error -= 9999999;
        }
        else if (fragPos.y > playerPos.y)
        {
            y_inc = 1;
            n += int(floor(fragPos.y)) - y;
            error -= (floor(playerPos.y) + 1 - playerPos.y) * dx;
        }
        else
        {
            y_inc = -1;
            n += y - int(floor(fragPos.y));
            error -= (playerPos.y - floor(playerPos.y)) * dx;
        }

        for (; n > 0; --n)
        {
            int texX = x - xOffset, texY = y - yOffset;
            if (texX >= 0 && texX < 16 && texY >= 0 && texY < 16)
                color = Opacity(color, texture3D(voxels, vec3(texX, texY, 0) / 16 + 0.5));

            if (error > 0)
            {
                y += y_inc;
                error -= dx;
            }
            else
            {
                x += x_inc;
                error += dy;
            }
        }
    }
    FragColor = Opacity(color, vec4(0.0, 0.0, 0.0, 1.0));
}